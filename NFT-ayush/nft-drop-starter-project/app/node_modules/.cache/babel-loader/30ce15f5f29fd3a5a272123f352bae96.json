{"ast":null,"code":"import { BaseWalletAdapter } from './adapter.mjs';\nimport { WalletError, WalletSendTransactionError } from './errors.mjs';\nexport class BaseSignerWalletAdapter extends BaseWalletAdapter {\n  async sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let emit = true;\n\n    try {\n      try {\n        transaction.feePayer = transaction.feePayer || this.publicKey || undefined;\n        transaction.recentBlockhash = transaction.recentBlockhash || (await connection.getRecentBlockhash('finalized')).blockhash;\n        const {\n          signers,\n          ...sendOptions\n        } = options;\n        (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.partialSign(...signers);\n        transaction = await this.signTransaction(transaction);\n        const rawTransaction = transaction.serialize();\n        return await connection.sendRawTransaction(rawTransaction, sendOptions);\n      } catch (error) {\n        // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n        if (error instanceof WalletError) {\n          emit = false;\n          throw error;\n        }\n\n        throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n      }\n    } catch (error) {\n      if (emit) {\n        this.emit('error', error);\n      }\n\n      throw error;\n    }\n  }\n\n}\nexport class BaseMessageSignerWalletAdapter extends BaseSignerWalletAdapter {}","map":{"version":3,"sources":["../../src/signer.ts"],"names":[],"mappings":"AACA,SAAS,iBAAT,QAAyE,eAAzE;AACA,SAAS,WAAT,EAAsB,0BAAtB,QAAwD,cAAxD;AASA,OAAM,MAAgB,uBAAhB,SAAgD,iBAAhD,CAAiE;AAC9C,QAAf,eAAe,CACjB,WADiB,EAEjB,UAFiB,EAGmB;AAAA,QAApC,OAAoC,uEAAF,EAAE;AAEpC,QAAI,IAAI,GAAG,IAAX;;AACA,QAAI;AACA,UAAI;AACA,QAAA,WAAW,CAAC,QAAZ,GAAuB,WAAW,CAAC,QAAZ,IAAwB,KAAK,SAA7B,IAA0C,SAAjE;AACA,QAAA,WAAW,CAAC,eAAZ,GACI,WAAW,CAAC,eAAZ,IAA+B,CAAC,MAAM,UAAU,CAAC,kBAAX,CAA8B,WAA9B,CAAP,EAAmD,SADtF;AAGA,cAAM;AAAE,UAAA,OAAF;AAAW,aAAG;AAAd,YAA8B,OAApC;AAEA,SAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAT,KAAmB,WAAW,CAAC,WAAZ,CAAwB,GAAG,OAA3B,CAAnB;AAEA,QAAA,WAAW,GAAG,MAAM,KAAK,eAAL,CAAqB,WAArB,CAApB;AAEA,cAAM,cAAc,GAAG,WAAW,CAAC,SAAZ,EAAvB;AAEA,eAAO,MAAM,UAAU,CAAC,kBAAX,CAA8B,cAA9B,EAA8C,WAA9C,CAAb;AACH,OAdD,CAcE,OAAO,KAAP,EAAmB;AACjB;AACA,YAAI,KAAK,YAAY,WAArB,EAAkC;AAC9B,UAAA,IAAI,GAAG,KAAP;AACA,gBAAM,KAAN;AACH;;AACD,cAAM,IAAI,0BAAJ,CAA+B,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,OAAtC,EAA+C,KAA/C,CAAN;AACH;AACJ,KAvBD,CAuBE,OAAO,KAAP,EAAmB;AACjB,UAAI,IAAJ,EAAU;AACN,aAAK,IAAL,CAAU,OAAV,EAAmB,KAAnB;AACH;;AACD,YAAM,KAAN;AACH;AACJ;;AApCkE;AAgDvE,OAAM,MAAgB,8BAAhB,SACM,uBADN,CAC6B","sourceRoot":"","sourcesContent":["import { BaseWalletAdapter } from './adapter.mjs';\nimport { WalletError, WalletSendTransactionError } from './errors.mjs';\nexport class BaseSignerWalletAdapter extends BaseWalletAdapter {\n    async sendTransaction(transaction, connection, options = {}) {\n        let emit = true;\n        try {\n            try {\n                transaction.feePayer = transaction.feePayer || this.publicKey || undefined;\n                transaction.recentBlockhash =\n                    transaction.recentBlockhash || (await connection.getRecentBlockhash('finalized')).blockhash;\n                const { signers, ...sendOptions } = options;\n                (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.partialSign(...signers);\n                transaction = await this.signTransaction(transaction);\n                const rawTransaction = transaction.serialize();\n                return await connection.sendRawTransaction(rawTransaction, sendOptions);\n            }\n            catch (error) {\n                // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n                if (error instanceof WalletError) {\n                    emit = false;\n                    throw error;\n                }\n                throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n            }\n        }\n        catch (error) {\n            if (emit) {\n                this.emit('error', error);\n            }\n            throw error;\n        }\n    }\n}\nexport class BaseMessageSignerWalletAdapter extends BaseSignerWalletAdapter {\n}\n//# sourceMappingURL=signer.js.map"]},"metadata":{},"sourceType":"module"}