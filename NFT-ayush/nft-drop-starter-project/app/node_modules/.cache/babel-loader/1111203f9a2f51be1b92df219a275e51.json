{"ast":null,"code":"import config from \"../config/discoverWidget\";\nexport const fetchItems = async function () {\n  let locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n  let countryCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'US';\n  let page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;\n  let keyword = arguments.length > 4 ? arguments[4] : undefined;\n  let {\n    BASE_URL,\n    EVENT_CONSTANT,\n    API_KEY\n  } = config;\n\n  try {\n    let result = await fetch(`${BASE_URL}/${EVENT_CONSTANT}?apikey=${API_KEY}&locale=${locale}&countryCode=${countryCode}&page=${page}&size=${size}${keyword ? `&keyword=${keyword}` : ''}`).then(res => res.json());\n    const {\n      _embedded\n    } = result;\n\n    if (_embedded && _embedded.events) {\n      return [..._embedded.events];\n    } else {\n      return [];\n    }\n  } catch (e) {\n    return [];\n  }\n};\nexport const fetchEvent = async eventId => {\n  let {\n    BASE_URL,\n    EVENT_CONSTANT,\n    API_KEY\n  } = config;\n\n  try {\n    let result = await fetch(`${BASE_URL}/events/${eventId}?apikey=${API_KEY}`).then(res => res.json()); // const { _embedded } = result;\n\n    console.log(\"result from api : \", result);\n    return result;\n  } catch (e) {\n    return null;\n  }\n};","map":{"version":3,"sources":["C:/Users/Nerika Moktan/Desktop/NFT-ayush/nft-drop-starter-project/app/src/utility/getEvents.js"],"names":["config","fetchItems","locale","countryCode","page","size","keyword","BASE_URL","EVENT_CONSTANT","API_KEY","result","fetch","then","res","json","_embedded","events","e","fetchEvent","eventId","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,0BAAnB;AAEA,OAAO,MAAMC,UAAU,GAAG,kBAAwE;AAAA,MAAjEC,MAAiE,uEAAxD,GAAwD;AAAA,MAAnDC,WAAmD,uEAArC,IAAqC;AAAA,MAA/BC,IAA+B,uEAAxB,CAAwB;AAAA,MAArBC,IAAqB,uEAAd,CAAc;AAAA,MAAZC,OAAY;AAC9F,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,cAAZ;AAA4BC,IAAAA;AAA5B,MAAwCT,MAA5C;;AACA,MAAI;AACA,QAAIU,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,IAAGC,cAAe,WAAUC,OAAQ,WAAUP,MAAO,gBAAeC,WAAY,SAAQC,IAAK,SAAQC,IAAK,GAAEC,OAAO,GAAE,YAAWA,OAAQ,EAArB,GAAuB,EAAG,EAA1J,CAAL,CAAkKM,IAAlK,CAAuKC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9K,CAAnB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAgBL,MAAtB;;AACA,QAAIK,SAAS,IAAIA,SAAS,CAACC,MAA3B,EAAmC;AACjC,aAAO,CAAC,GAAGD,SAAS,CAACC,MAAd,CAAP;AACD,KAFD,MAGK;AACH,aAAO,EAAP;AACD;AACJ,GATD,CAUA,OAAOC,CAAP,EAAU;AACR,WAAO,EAAP;AACD;AAEF,CAhBI;AAiBL,OAAO,MAAMC,UAAU,GAAG,MAAOC,OAAP,IAAmB;AAC3C,MAAI;AAAEZ,IAAAA,QAAF;AAAYC,IAAAA,cAAZ;AAA4BC,IAAAA;AAA5B,MAAwCT,MAA5C;;AACA,MAAI;AACA,QAAIU,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,WAAUY,OAAQ,WAAUV,OAAQ,EAAjD,CAAL,CAAyDG,IAAzD,CAA8DC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAArE,CAAnB,CADA,CAEA;;AACDM,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCX,MAAjC;AACA,WAAOA,MAAP;AACF,GALD,CAMA,OAAOO,CAAP,EAAU;AACR,WAAO,IAAP;AACD;AAEF,CAZM","sourcesContent":["import config from \"../config/discoverWidget\";\r\n\r\nexport const fetchItems = async (locale = '*', countryCode = 'US', page = 1, size = 5,keyword) => {\r\n    let { BASE_URL, EVENT_CONSTANT, API_KEY } = config;\r\n    try {\r\n        let result = await fetch(`${BASE_URL}/${EVENT_CONSTANT}?apikey=${API_KEY}&locale=${locale}&countryCode=${countryCode}&page=${page}&size=${size}${keyword?`&keyword=${keyword}`:''}`).then(res => res.json());\r\n        const { _embedded } = result;\r\n        if (_embedded && _embedded.events) {\r\n          return [..._embedded.events];\r\n        }\r\n        else {\r\n          return [];\r\n        }\r\n    }\r\n    catch (e) {\r\n      return []\r\n    }\r\n\r\n  }\r\n  export const fetchEvent = async (eventId) => {\r\n    let { BASE_URL, EVENT_CONSTANT, API_KEY } = config; \r\n    try {\r\n        let result = await fetch(`${BASE_URL}/events/${eventId}?apikey=${API_KEY}`).then(res => res.json());\r\n        // const { _embedded } = result;\r\n       console.log(\"result from api : \",result)\r\n       return result;\r\n    }\r\n    catch (e) {\r\n      return null\r\n    }\r\n\r\n  }"]},"metadata":{},"sourceType":"module"}