{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nerika Moktan\\\\Desktop\\\\NFT-ayush\\\\nft-drop-starter-project\\\\app\\\\src\\\\Components\\\\Phantom\\\\Phantom.js\";\nimport React, { useEffect, useState } from 'react';\nimport './Phantom.css';\nimport CandyMachine from './CandyMachine';\nimport PWallet from '../../assets/phantom-logo-long.png';\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null); // Actions\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /*\r\n           * Set the user's publicKey in state to be used later!\r\n           */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/React.createElement(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, \"Connect to Wallet\");\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Phantom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"header\",\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"img\", {\n    src: PWallet,\n    height: \"100px\",\n    alt: \"Phatom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 43\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"NFT drop machine with fair mint\"), !walletAddress && renderNotConnectedContainer()), walletAddress && /*#__PURE__*/React.createElement(CandyMachine, {\n    walletAddress: window.solana,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 27\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Nerika Moktan/Desktop/NFT-ayush/nft-drop-starter-project/app/src/Components/Phantom/Phantom.js"],"names":["React","useEffect","useState","CandyMachine","PWallet","App","walletAddress","setWalletAddress","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Phantom.css';\r\nimport CandyMachine from './CandyMachine';\r\nimport PWallet from '../../assets/phantom-logo-long.png'\r\n\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n\r\n  // Actions\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('Phantom wallet found!');\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            'Connected with Public Key:',\r\n            response.publicKey.toString()\r\n          );\r\n\r\n          /*\r\n           * Set the user's publicKey in state to be used later!\r\n           */\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n  if (solana) {\r\n    const response = await solana.connect();\r\n    console.log('Connected with Public Key:', response.publicKey.toString());\r\n    setWalletAddress(response.publicKey.toString());\r\n  }};\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Phantom\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <a className=\"header\" href='#'> <img src = {PWallet} height = '100px' alt = \"Phatom\"/></a>\r\n          <p className=\"sub-text\">NFT drop machine with fair mint</p>\r\n          {/* Add the condition to show this only if we don't have a wallet address */}\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n        </div>\r\n        {/* Check for walletAddress and then pass in walletAddress */}\r\n        {walletAddress && <CandyMachine walletAddress={window.solana} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}