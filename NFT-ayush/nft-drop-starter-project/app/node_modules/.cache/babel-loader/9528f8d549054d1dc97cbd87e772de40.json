{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nerika Moktan\\\\Desktop\\\\NFT-ayush\\\\nft-drop-starter-project\\\\app\\\\src\\\\Components\\\\Phantom\\\\CountdownTimer\\\\index.js\";\nimport React, { useEffect, useState } from 'react';\nimport './CountdownTimer.css';\n\nconst CountdownTimer = _ref => {\n  let {\n    dropDate\n  } = _ref;\n  // State\n  const [timerString, setTimerString] = useState(''); // Our useEffect will run on component load\n\n  useEffect(() => {\n    console.log('Setting interval...'); // Use setInterval to run this piece of code every second\n\n    const interval = setInterval(() => {\n      const currentDate = new Date().getTime();\n      const distance = dropDate - currentDate; // Here it's as easy as doing some time math to get the different properties\n\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      const minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n      const seconds = Math.floor(distance % (1000 * 60) / 1000); // We have our desired output, set it in state!\n\n      setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`); // If our distance passes zero this means that it's drop time!\n\n      if (distance < 0) {\n        console.log('Clearing interval...');\n        clearInterval(interval);\n      }\n    }, 1000); // Anytime our component unmounts let's clean up our interval\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [dropDate]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"timer-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Candy Drop Starting In\"), timerString && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"timer-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }\n  }, `⏰ ${timerString}`));\n};\n\nexport default CountdownTimer;","map":{"version":3,"sources":["C:/Users/Nerika Moktan/Desktop/NFT-ayush/nft-drop-starter-project/app/src/Components/Phantom/CountdownTimer/index.js"],"names":["React","useEffect","useState","CountdownTimer","dropDate","timerString","setTimerString","console","log","interval","setInterval","currentDate","Date","getTime","distance","days","Math","floor","hours","minutes","seconds","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,sBAAP;;AAEA,MAAMC,cAAc,GAAG,QAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACvC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C,CAFuC,CAIrC;;AACJD,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EADY,CAGZ;;AACA,UAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,YAAMC,QAAQ,GAAGV,QAAQ,GAAGO,WAA5B,CAFiC,CAIjC;;AACA,YAAMI,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAnB,CAAb;AACA,YAAMI,KAAK,GAAGF,IAAI,CAACC,KAAL,CACXH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAT,IAAsC,OAAO,EAAP,GAAY,EAAlD,CADY,CAAd;AAGA,YAAMK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAAhB;AACA,YAAMM,OAAO,GAAGJ,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC,CAAhB,CAViC,CAYjC;;AACAR,MAAAA,cAAc,CAAE,GAAES,IAAK,KAAIG,KAAM,KAAIC,OAAQ,KAAIC,OAAQ,GAA3C,CAAd,CAbiC,CAejC;;AACA,UAAIN,QAAQ,GAAG,CAAf,EAAkB;AAChBP,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAa,QAAAA,aAAa,CAACZ,QAAD,CAAb;AACD;AACF,KApB2B,EAoBzB,IApByB,CAA5B,CAJY,CA0BZ;;AACA,WAAO,MAAM;AACX,UAAIA,QAAJ,EAAc;AACZY,QAAAA,aAAa,CAACZ,QAAD,CAAb;AACD;AACF,KAJD;AAKD,GAhCM,EAgCJ,CAACL,QAAD,CAhCI,CAAT;AAoCE,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEGC,WAAW,iBAAI;AAAG,IAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6B,KAAIA,WAAY,EAA7C,CAFlB,CADF;AAMD,CA/CD;;AAiDA,eAAeF,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './CountdownTimer.css';\r\n\r\nconst CountdownTimer = ({ dropDate }) => {\r\n  // State\r\n  const [timerString, setTimerString] = useState('');\r\n\r\n    // Our useEffect will run on component load\r\nuseEffect(() => {\r\n    console.log('Setting interval...');\r\n \r\n    // Use setInterval to run this piece of code every second\r\n    const interval = setInterval(() => {\r\n      const currentDate = new Date().getTime();\r\n      const distance = dropDate - currentDate;\r\n \r\n      // Here it's as easy as doing some time math to get the different properties\r\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n \r\n      // We have our desired output, set it in state!\r\n      setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`);\r\n \r\n      // If our distance passes zero this means that it's drop time!\r\n      if (distance < 0) {\r\n        console.log('Clearing interval...');\r\n        clearInterval(interval);\r\n      }\r\n    }, 1000);\r\n \r\n    // Anytime our component unmounts let's clean up our interval\r\n    return () => {\r\n      if (interval) {\r\n        clearInterval(interval);\r\n      }\r\n    };\r\n  }, [dropDate]);\r\n \r\n\r\n\r\n  return (\r\n    <div className=\"timer-container\">\r\n      <p className=\"timer-header\">Candy Drop Starting In</p>\r\n      {timerString && <p className=\"timer-value\">{`⏰ ${timerString}`}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountdownTimer;\r\n"]},"metadata":{},"sourceType":"module"}