{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nerika Moktan\\\\Desktop\\\\NFT-ayush\\\\nft-drop-starter-project\\\\app\\\\src\\\\Components\\\\Phantom\\\\CandyMachine\\\\index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { sendTransactions } from './connection';\nimport CountdownTimer from '../CountdownTimer';\nimport './CandyMachine.css';\nimport { candyMachineProgram, TOKEN_METADATA_PROGRAM_ID, SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, getAtaForMint, getNetworkExpire, getNetworkToken, CIVIC } from './helpers';\nconst {\n  SystemProgram\n} = web3;\nconst opts = {\n  preflightCommitment: 'processed'\n};\n\nconst CandyMachine = _ref => {\n  let {\n    walletAddress\n  } = _ref;\n  const [candyMachine, setCandyMachine] = useState(null);\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    const connection = new Connection(rpcHost);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n    const program = new Program(idl, candyMachineProgram, provider);\n    const candyMachine = await program.account.candyMachine.fetch(process.env.REACT_APP_CANDY_MACHINE_ID);\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n    const presale = candyMachine.data.whitelistMintSettings && candyMachine.data.whitelistMintSettings.presale && (!candyMachine.data.goLiveDate || candyMachine.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toGMTString()}`;\n    setCandyMachine({\n      id: process.env.REACT_APP_CANDY_MACHINE_ID,\n      program,\n      state: {\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveData,\n        goLiveDateTimeString,\n        isSoldOut: itemsRemaining === 0,\n        isActive: (presale || candyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) && (candyMachine.endSettings ? candyMachine.endSettings.endSettingType.date ? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000 : itemsRedeemed < candyMachine.endSettings.number.toNumber() : true),\n        isPresale: presale,\n        goLiveDate: candyMachine.data.goLiveDate,\n        treasury: candyMachine.wallet,\n        tokenMint: candyMachine.tokenMint,\n        gatekeeper: candyMachine.data.gatekeeper,\n        endSettings: candyMachine.data.endSettings,\n        whitelistMintSettings: candyMachine.data.whitelistMintSettings,\n        hiddenSettings: candyMachine.data.hiddenSettings,\n        price: candyMachine.data.price\n      }\n    });\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n      presale\n    });\n  };\n\n  const getCandyMachineCreator = async candyMachine => {\n    const candyMachineID = new PublicKey(candyMachine);\n    return await web3.PublicKey.findProgramAddress([Buffer.from('candy_machine'), candyMachineID.toBuffer()], candyMachineProgram);\n  };\n\n  const getMetadata = async mint => {\n    return (await PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n  };\n\n  const getMasterEdition = async mint => {\n    return (await PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from('edition')], TOKEN_METADATA_PROGRAM_ID))[0];\n  };\n\n  const createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n    const keys = [{\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([])\n    });\n  };\n\n  const mintToken = async () => {\n    const mint = web3.Keypair.generate();\n    const userTokenAccountAddress = (await getAtaForMint(mint.publicKey, walletAddress.publicKey))[0];\n    const userPayingAccountAddress = candyMachine.state.tokenMint ? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0] : walletAddress.publicKey;\n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [mint];\n    const cleanupInstructions = [];\n    const instructions = [web3.SystemProgram.createAccount({\n      fromPubkey: walletAddress.publicKey,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(MintLayout.span),\n      programId: TOKEN_PROGRAM_ID\n    }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, walletAddress.publicKey, walletAddress.publicKey), createAssociatedTokenAccountInstruction(userTokenAccountAddress, walletAddress.publicKey, walletAddress.publicKey, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, walletAddress.publicKey, [], 1)];\n\n    if (candyMachine.state.gatekeeper) {\n      remainingAccounts.push({\n        pubkey: (await getNetworkToken(walletAddress.publicKey, candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n        isWritable: true,\n        isSigner: false\n      });\n\n      if (candyMachine.state.gatekeeper.expireOnUse) {\n        remainingAccounts.push({\n          pubkey: CIVIC,\n          isWritable: false,\n          isSigner: false\n        });\n        remainingAccounts.push({\n          pubkey: (await getNetworkExpire(candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n          isWritable: false,\n          isSigner: false\n        });\n      }\n    }\n\n    if (candyMachine.state.whitelistMintSettings) {\n      const mint = new web3.PublicKey(candyMachine.state.whitelistMintSettings.mint);\n      const whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\n      remainingAccounts.push({\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false\n      });\n\n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n        const whitelistBurnAuthority = web3.Keypair.generate();\n        remainingAccounts.push({\n          pubkey: mint,\n          isWritable: true,\n          isSigner: false\n        });\n        remainingAccounts.push({\n          pubkey: whitelistBurnAuthority.publicKey,\n          isWritable: false,\n          isSigner: true\n        });\n        signers.push(whitelistBurnAuthority);\n        const exists = await candyMachine.program.provider.connection.getAccountInfo(whitelistToken);\n\n        if (exists) {\n          instructions.push(Token.createApproveInstruction(TOKEN_PROGRAM_ID, whitelistToken, whitelistBurnAuthority.publicKey, walletAddress.publicKey, [], 1));\n          cleanupInstructions.push(Token.createRevokeInstruction(TOKEN_PROGRAM_ID, whitelistToken, walletAddress.publicKey, []));\n        }\n      }\n    }\n\n    if (candyMachine.state.tokenMint) {\n      const transferAuthority = web3.Keypair.generate();\n      signers.push(transferAuthority);\n      remainingAccounts.push({\n        pubkey: userPayingAccountAddress,\n        isWritable: true,\n        isSigner: false\n      });\n      remainingAccounts.push({\n        pubkey: transferAuthority.publicKey,\n        isWritable: false,\n        isSigner: true\n      });\n      instructions.push(Token.createApproveInstruction(TOKEN_PROGRAM_ID, userPayingAccountAddress, transferAuthority.publicKey, walletAddress.publicKey, [], candyMachine.state.price.toNumber()));\n      cleanupInstructions.push(Token.createRevokeInstruction(TOKEN_PROGRAM_ID, userPayingAccountAddress, walletAddress.publicKey, []));\n    }\n\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(candyMachineAddress);\n    instructions.push(await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: walletAddress.publicKey,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY\n      },\n      remainingAccounts: remainingAccounts.length > 0 ? remainingAccounts : undefined\n    }));\n\n    try {\n      return (await sendTransactions(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, [instructions, cleanupInstructions], [signers, []])).txs.map(t => t.txid);\n    } catch (e) {\n      console.log(e);\n    }\n\n    return [];\n  }; // Create render function\n\n\n  const renderDropTimer = () => {\n    // Get the current date and dropDate in a JavaScript Date object\n    const currentDate = new Date();\n    const dropDate = new Date(candyMachine.state.goLiveData * 1000); // If currentDate is before dropDate, render our Countdown component\n\n    if (currentDate < dropDate) {\n      console.log('Before drop date!'); // Don't forget to pass over your dropDate!\n\n      return /*#__PURE__*/React.createElement(CountdownTimer, {\n        dropDate: dropDate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 12\n        }\n      });\n    } // Else let's just return the current drop date\n\n\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 10\n      }\n    }, `Drop Date: ${candyMachine.state.goLiveDateTimeString}`);\n  };\n\n  return candyMachine && candyMachine.state && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"machine-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 5\n    }\n  }, renderDropTimer(), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }\n  }, `Items Minted: ${candyMachine.state.itemsRedeemed} / ${candyMachine.state.itemsAvailable}`), candyMachine.state.itemsRedeemed === candyMachine.state.itemsAvailable ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 11\n    }\n  }, \"Sold Out \\uD83D\\uDE4A\") : /*#__PURE__*/React.createElement(\"button\", {\n    className: \"cta-button mint-button\",\n    onClick: mintToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 11\n    }\n  }, \"Mint NFT\"));\n};\n\nexport default CandyMachine;","map":{"version":3,"sources":["C:/Users/Nerika Moktan/Desktop/NFT-ayush/nft-drop-starter-project/app/src/Components/Phantom/CandyMachine/index.js"],"names":["React","useEffect","useState","Connection","PublicKey","Program","Provider","web3","MintLayout","TOKEN_PROGRAM_ID","Token","sendTransactions","CountdownTimer","candyMachineProgram","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","getAtaForMint","getNetworkExpire","getNetworkToken","CIVIC","SystemProgram","opts","preflightCommitment","CandyMachine","walletAddress","candyMachine","setCandyMachine","getCandyMachineState","getProvider","rpcHost","process","env","REACT_APP_SOLANA_RPC_HOST","connection","provider","window","solana","idl","fetchIdl","program","account","fetch","REACT_APP_CANDY_MACHINE_ID","itemsAvailable","data","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","presale","whitelistMintSettings","Date","getTime","goLiveDateTimeString","toGMTString","id","state","isSoldOut","isActive","endSettings","endSettingType","date","number","isPresale","treasury","wallet","tokenMint","gatekeeper","hiddenSettings","price","console","log","getCandyMachineCreator","candyMachineID","findProgramAddress","Buffer","from","toBuffer","getMetadata","mint","getMasterEdition","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","mintToken","Keypair","generate","userTokenAccountAddress","publicKey","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","instructions","createAccount","fromPubkey","newAccountPubkey","space","span","lamports","getMinimumBalanceForRentExemption","createInitMintInstruction","createMintToInstruction","push","gatekeeperNetwork","expireOnUse","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","exists","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","txs","map","t","txid","e","renderDropTimer","currentDate","dropDate"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Connection, PublicKey } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { sendTransactions } from './connection';\r\nimport CountdownTimer from '../CountdownTimer';\r\nimport './CandyMachine.css';\r\nimport {\r\n  candyMachineProgram,\r\n  TOKEN_METADATA_PROGRAM_ID,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  CIVIC\r\n} from './helpers';\r\n\r\nconst { SystemProgram } = web3;\r\nconst opts = {\r\n  preflightCommitment: 'processed',\r\n};\r\n\r\nconst CandyMachine = ({ walletAddress }) => {\r\n\r\n  const [candyMachine, setCandyMachine] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getCandyMachineState();\r\n  }, []);\r\n\r\n  const getProvider = () => {\r\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\r\n    const connection = new Connection(rpcHost);\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n \r\n    return provider;\r\n  };\r\n\r\n  const getCandyMachineState = async () => {\r\n    const provider = getProvider();\r\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\r\n    const program = new Program(idl, candyMachineProgram, provider);\r\n    const candyMachine = await program.account.candyMachine.fetch(\r\n      process.env.REACT_APP_CANDY_MACHINE_ID\r\n    );\r\n   \r\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\r\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\r\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\r\n    const presale =\r\n      candyMachine.data.whitelistMintSettings &&\r\n      candyMachine.data.whitelistMintSettings.presale &&\r\n      (!candyMachine.data.goLiveDate ||\r\n        candyMachine.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\r\n   \r\n    const goLiveDateTimeString = `${new Date(\r\n      goLiveData * 1000\r\n    ).toGMTString()}`\r\n\r\n    setCandyMachine({\r\n      id: process.env.REACT_APP_CANDY_MACHINE_ID,\r\n      program,\r\n      state: {\r\n        itemsAvailable,\r\n        itemsRedeemed,\r\n        itemsRemaining,\r\n        goLiveData,\r\n        goLiveDateTimeString,\r\n        isSoldOut: itemsRemaining === 0,\r\n        isActive:\r\n          (presale ||\r\n            candyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\r\n          (candyMachine.endSettings\r\n            ? candyMachine.endSettings.endSettingType.date\r\n              ? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n              : itemsRedeemed < candyMachine.endSettings.number.toNumber()\r\n            : true),\r\n        isPresale: presale,\r\n        goLiveDate: candyMachine.data.goLiveDate,\r\n        treasury: candyMachine.wallet,\r\n        tokenMint: candyMachine.tokenMint,\r\n        gatekeeper: candyMachine.data.gatekeeper,\r\n        endSettings: candyMachine.data.endSettings,\r\n        whitelistMintSettings: candyMachine.data.whitelistMintSettings,\r\n        hiddenSettings: candyMachine.data.hiddenSettings,\r\n        price: candyMachine.data.price,\r\n      },\r\n    });\r\n\r\n    console.log({\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      goLiveData,\r\n      goLiveDateTimeString,\r\n      presale,\r\n    });\r\n  };\r\n\r\n  const getCandyMachineCreator = async (candyMachine) => {\r\n    const candyMachineID = new PublicKey(candyMachine);\r\n    return await web3.PublicKey.findProgramAddress(\r\n        [Buffer.from('candy_machine'), candyMachineID.toBuffer()],\r\n        candyMachineProgram,\r\n    );\r\n  };\r\n\r\n  const getMetadata = async (mint) => {\r\n    return (\r\n      await PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  };\r\n\r\n  const getMasterEdition = async (mint) => {\r\n    return (\r\n      await PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n          Buffer.from('edition'),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  };\r\n \r\n  const createAssociatedTokenAccountInstruction = (\r\n    associatedTokenAddress,\r\n    payer,\r\n    walletAddress,\r\n    splTokenMintAddress\r\n  ) => {\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n      {\r\n        pubkey: web3.SystemProgram.programId,\r\n        isSigner: false,\r\n        isWritable: false,\r\n      },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      {\r\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\r\n        isSigner: false,\r\n        isWritable: false,\r\n      },\r\n    ];\r\n    return new web3.TransactionInstruction({\r\n      keys,\r\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n      data: Buffer.from([]),\r\n    });\r\n  };\r\n\r\n  const mintToken = async () => {\r\n    const mint = web3.Keypair.generate();\r\n\r\n    const userTokenAccountAddress = (\r\n      await getAtaForMint(mint.publicKey, walletAddress.publicKey)\r\n    )[0];\r\n \r\n    const userPayingAccountAddress = candyMachine.state.tokenMint\r\n      ? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0]\r\n      : walletAddress.publicKey;\r\n \r\n    const candyMachineAddress = candyMachine.id;\r\n    const remainingAccounts = [];\r\n    const signers = [mint];\r\n    const cleanupInstructions = [];\r\n    const instructions = [\r\n      web3.SystemProgram.createAccount({\r\n        fromPubkey: walletAddress.publicKey,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports:\r\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n            MintLayout.span,\r\n          ),\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        walletAddress.publicKey,\r\n        walletAddress.publicKey,\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        userTokenAccountAddress,\r\n        walletAddress.publicKey,\r\n        walletAddress.publicKey,\r\n        mint.publicKey,\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        userTokenAccountAddress,\r\n        walletAddress.publicKey,\r\n        [],\r\n        1,\r\n      ),\r\n    ];\r\n \r\n    if (candyMachine.state.gatekeeper) {\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkToken(\r\n            walletAddress.publicKey,\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      if (candyMachine.state.gatekeeper.expireOnUse) {\r\n        remainingAccounts.push({\r\n          pubkey: CIVIC,\r\n          isWritable: false,\r\n          isSigner: false,\r\n        });\r\n        remainingAccounts.push({\r\n          pubkey: (\r\n            await getNetworkExpire(\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n            )\r\n          )[0],\r\n          isWritable: false,\r\n          isSigner: false,\r\n        });\r\n      }\r\n    }\r\n    if (candyMachine.state.whitelistMintSettings) {\r\n      const mint = new web3.PublicKey(\r\n        candyMachine.state.whitelistMintSettings.mint,\r\n      );\r\n \r\n      const whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\r\n      remainingAccounts.push({\r\n        pubkey: whitelistToken,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n \r\n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n        const whitelistBurnAuthority = web3.Keypair.generate();\r\n \r\n        remainingAccounts.push({\r\n          pubkey: mint,\r\n          isWritable: true,\r\n          isSigner: false,\r\n        });\r\n        remainingAccounts.push({\r\n          pubkey: whitelistBurnAuthority.publicKey,\r\n          isWritable: false,\r\n          isSigner: true,\r\n        });\r\n        signers.push(whitelistBurnAuthority);\r\n        const exists =\r\n          await candyMachine.program.provider.connection.getAccountInfo(\r\n            whitelistToken,\r\n          );\r\n        if (exists) {\r\n          instructions.push(\r\n            Token.createApproveInstruction(\r\n              TOKEN_PROGRAM_ID,\r\n              whitelistToken,\r\n              whitelistBurnAuthority.publicKey,\r\n              walletAddress.publicKey,\r\n              [],\r\n              1,\r\n            ),\r\n          );\r\n          cleanupInstructions.push(\r\n            Token.createRevokeInstruction(\r\n              TOKEN_PROGRAM_ID,\r\n              whitelistToken,\r\n              walletAddress.publicKey,\r\n              [],\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    }\r\n \r\n    if (candyMachine.state.tokenMint) {\r\n      const transferAuthority = web3.Keypair.generate();\r\n \r\n      signers.push(transferAuthority);\r\n      remainingAccounts.push({\r\n        pubkey: userPayingAccountAddress,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: transferAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n \r\n      instructions.push(\r\n        Token.createApproveInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          userPayingAccountAddress,\r\n          transferAuthority.publicKey,\r\n          walletAddress.publicKey,\r\n          [],\r\n          candyMachine.state.price.toNumber(),\r\n        ),\r\n      );\r\n      cleanupInstructions.push(\r\n        Token.createRevokeInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          userPayingAccountAddress,\r\n          walletAddress.publicKey,\r\n          [],\r\n        ),\r\n      );\r\n    }\r\n    const metadataAddress = await getMetadata(mint.publicKey);\r\n    const masterEdition = await getMasterEdition(mint.publicKey);\r\n \r\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n      candyMachineAddress,\r\n    );\r\n \r\n    instructions.push(\r\n      await candyMachine.program.instruction.mintNft(creatorBump, {\r\n        accounts: {\r\n          candyMachine: candyMachineAddress,\r\n          candyMachineCreator,\r\n          payer: walletAddress.publicKey,\r\n          wallet: candyMachine.state.treasury,\r\n          mint: mint.publicKey,\r\n          metadata: metadataAddress,\r\n          masterEdition,\r\n          mintAuthority: walletAddress.publicKey,\r\n          updateAuthority: walletAddress.publicKey,\r\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: SystemProgram.programId,\r\n          rent: web3.SYSVAR_RENT_PUBKEY,\r\n          clock: web3.SYSVAR_CLOCK_PUBKEY,\r\n          recentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n          instructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n        },\r\n        remainingAccounts:\r\n          remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n      }),\r\n    );\r\n \r\n    try {\r\n      return (\r\n        await sendTransactions(\r\n          candyMachine.program.provider.connection,\r\n          candyMachine.program.provider.wallet,\r\n          [instructions, cleanupInstructions],\r\n          [signers, []],\r\n        )\r\n      ).txs.map(t => t.txid);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n    return [];\r\n  };\r\n\r\n// Create render function\r\nconst renderDropTimer = () => {\r\n  // Get the current date and dropDate in a JavaScript Date object\r\n  const currentDate = new Date();\r\n  const dropDate = new Date(candyMachine.state.goLiveData * 1000);\r\n\r\n  // If currentDate is before dropDate, render our Countdown component\r\n  if (currentDate < dropDate) {\r\n    console.log('Before drop date!');\r\n    // Don't forget to pass over your dropDate!\r\n    return <CountdownTimer dropDate={dropDate} />;\r\n  }\r\n\r\n  // Else let's just return the current drop date\r\n  return <p>{`Drop Date: ${candyMachine.state.goLiveDateTimeString}`}</p>;\r\n};\r\n\r\nreturn (\r\n  candyMachine && candyMachine.state && (\r\n    <div className=\"machine-container\">\r\n      {renderDropTimer()}\r\n      <p>{`Items Minted: ${candyMachine.state.itemsRedeemed} / ${candyMachine.state.itemsAvailable}`}</p>\r\n        {/* Check to see if these properties are equal! */}\r\n        {candyMachine.state.itemsRedeemed === candyMachine.state.itemsAvailable ? (\r\n          <p className=\"sub-text\">Sold Out 🙊</p>\r\n        ) : (\r\n          <button\r\n            className=\"cta-button mint-button\"\r\n            onClick={mintToken}\r\n          >\r\n            Mint NFT\r\n          </button>\r\n        )}\r\n    </div>\r\n  )\r\n);\r\n};\r\n\r\nexport default CandyMachine;\r\n\r\n"]},"metadata":{},"sourceType":"module"}